// Generated by CoffeeScript 1.6.2
(function() {
  var SOCKET_TEMPLATE, createServer, ejs, fs, getTempl, http, insertSocket, insertTempl, io, path, renderDir, res500, sortFiles, types, url, watcher;

  http = require("http");

  io = require("socket.io");

  ejs = require("ejs");

  url = require("url");

  fs = require("fs");

  path = require("path");

  types = require("mime").types;

  watcher = require("watch-tree-maintained").watchTree(".", {
    "ignore": /(.*\/\.\w+|.*~$)/
  });

  SOCKET_TEMPLATE = "<script src=\"/socket.io/socket.io.js\"></script>\n<script src=\"/f5static/refresh.js\"></script>";

  getTempl = function(file) {
    var templDir;

    templDir = path.join(__dirname, '..', './template/');
    file = templDir + file;
    return "" + fs.readFileSync(file);
  };

  insertTempl = function(file, templ) {
    var index, matchrx, matchs, splits;

    matchrx = /<\/\s*body\s*>/gi;
    matchs = file.match(matchrx);
    splits = file.split(matchrx);
    if (!splits.length) {
      return file += templ + '';
    } else {
      index = file.length - matchs[matchs.length - 1].length - splits[splits.length - 1].length;
      return file = file.slice(0, index) + templ.join("") + file.slice(index);
    }
  };

  insertSocket = function(file) {
    return insertTempl(file, [SOCKET_TEMPLATE]);
  };

  res500 = function(err, res) {
    res.writeHead(500, {
      "Content-Type": "text/plain"
    });
    return res.end(err);
  };

  sortFiles = function(realPath, files) {
    var file, _files, _folders, _i, _len;

    _folders = [];
    _files = [];
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (fs.statSync(realPath + file).isDirectory()) {
        _folders.push(file);
      } else {
        _files.push(file);
      }
    }
    return _folders.concat(_files);
  };

  renderDir = function(realPath, files) {
    var file, filetype, html, _extname, _files, _i, _len, _path;

    files = sortFiles(realPath, files);
    if (realPath[realPath.length - 1] !== "/") {
      realPath += "/";
    }
    html = [];
    html.push("<ul>");
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (file[0] === '.') {
        continue;
      }
      _path = realPath + file;
      if (fs.statSync(_path).isDirectory()) {
        _files = fs.readdirSync(_path);
        html.push(ejs.render(getTempl("dir.ejs"), {
          _path: _path,
          file: file,
          subdir: renderDir(_path, _files)
        }));
      } else {
        _extname = path.extname(file);
        _extname = _extname.length ? _extname.substr(1) : "";
        filetype = '';
        switch (_extname) {
          case 'css':
            filetype = 'css';
            break;
          case 'html':
          case 'htm':
            filetype = 'html';
            break;
          case 'js':
          case 'coffee':
            filetype = 'javascript';
            break;
          case 'jpg':
          case 'jpeg':
          case 'psd':
          case 'gif':
          case 'png':
            filetype = 'image';
            break;
          case 'rar':
          case 'zip':
          case '7z':
            filetype = 'zipfile';
            break;
          default:
            filetype = 'defaulttype';
        }
        html.push(ejs.render(getTempl("file.ejs"), {
          filetype: filetype,
          _path: _path,
          file: file
        }));
      }
    }
    html.push("</ul>");
    return html.join("");
  };

  createServer = function(config) {
    var change, server, sockets, _i, _io, _len, _path, _port, _ref, _ref1, _sockets;

    _path = config.path;
    _port = config.port;
    server = http.createServer(function(req, res) {
      var pathname, realPath;

      pathname = url.parse(req.url).pathname;
      realPath = decodeURIComponent(_path + pathname);
      if ((realPath.split("/"))[1] === 'f5static') {
        realPath = path.join(__dirname, '..', realPath);
      }
      /* path exist
      */

      return fs.exists(realPath, function(exists) {
        var ext;

        if (!exists) {
          res.writeHead(404, {
            "Content-Type": "text/html"
          });
          res.write(ejs.render(getTempl("404.ejs"), {
            _htmltext: "404 Not Found",
            title: "404 Not Found"
          }));
          return res.end();
        } else if (fs.statSync(realPath).isDirectory()) {
          return fs.readdir(realPath, function(err, files) {
            var _htmltext;

            if (err) {
              return res500(err, res);
            } else {
              res.writeHead(200, {
                "Content-Type": types["html"]
              });
              _htmltext = renderDir(realPath, files);
              res.write(ejs.render(getTempl("tree.ejs"), {
                _htmltext: _htmltext,
                title: realPath
              }));
              return res.end();
            }
          });
        } else {
          ext = path.extname(realPath);
          if (ext) {
            ext = ext.slice(1);
          } else {
            ext = "unknown";
          }
          res.setHeader("Content-Type", types[ext] || "text/plian");
          return fs.readFile(realPath, "binary", function(err, file) {
            if (err) {
              return res500(err, res);
            } else {
              res.writeHead(200, "Ok");
              if (ext === "html" || ext === "htm") {
                file = insertSocket(file);
              }
              res.write(file, "binary");
              return res.end();
            }
          });
        }
      });
    });
    _sockets = [];
    _io = (_ref = io.listen(server, {
      "log level": 0
    }), sockets = _ref.sockets, _ref);
    sockets.on("connection", function(socket) {
      return _sockets.push(socket);
    });
    _ref1 = ["fileCreated", "fileModified", "fileDeleted"];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      change = _ref1[_i];
      watcher.on(change, function(file) {
        var socket, _j, _len1, _results;

        _results = [];
        for (_j = 0, _len1 = _sockets.length; _j < _len1; _j++) {
          socket = _sockets[_j];
          _results.push(socket.emit("reload", file));
        }
        return _results;
      });
    }
    server.listen(_port);
    return console.log("f5 is on localhost:" + _port + " now.");
  };

  exports.version = 'v0.0.6';

  exports.createServer = createServer;

}).call(this);
